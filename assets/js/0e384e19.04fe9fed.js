"use strict";(self.webpackChunkbeanio_github_org=self.webpackChunkbeanio_github_org||[]).push([[671],{7876:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>o});var r=t(5893),i=t(1151);const a={id:"intro",title:"Introduction to BeanIO",sidebar_label:"Introduction",slug:"/"},c=void 0,s={id:"intro",title:"Introduction to BeanIO",description:"BeanIO is an open source Java framework for marshalling and unmarshalling",source:"@site/docs/intro.md",sourceDirName:".",slug:"/",permalink:"/docs/",draft:!1,unlisted:!1,editUrl:"https://github.com/beanio/beanio.github.io/edit/main/docs/intro.md",tags:[],version:"current",frontMatter:{id:"intro",title:"Introduction to BeanIO",sidebar_label:"Introduction",slug:"/"},sidebar:"someSidebar",next:{title:"Reference Guide",permalink:"/docs/reference-guide"}},d={},o=[{value:"Features",id:"features",level:2},{value:"A Quick Example",id:"a-quick-example",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"BeanIO"})," is an open source Java framework for marshalling and unmarshalling\nJava beans from a flat file, stream, or simple ",(0,r.jsx)(n.code,{children:"String"})," object."]}),"\n",(0,r.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Support for XML, CSV, delimited and fixed length stream formats"}),"\n",(0,r.jsx)(n.li,{children:"XML, Java annotations or builder API based field mapping"}),"\n",(0,r.jsx)(n.li,{children:"Configurable record ordering and grouping rules"}),"\n",(0,r.jsx)(n.li,{children:"Object binding that spans multiple records"}),"\n",(0,r.jsx)(n.li,{children:"Record identification by one or more field values, or by record length"}),"\n",(0,r.jsx)(n.li,{children:"Common field validation rules with customizable error messages"}),"\n",(0,r.jsx)(n.li,{children:"Extensible stream parsing and type handling"}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)("del",{children:["Integration with ",(0,r.jsx)("a",{href:"http://static.springsource.org/spring-batch/",children:"Spring Batch"})]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"OSGi compatible"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"a-quick-example",children:"A Quick Example"}),"\n",(0,r.jsx)(n.p,{children:"Let's suppose you want to read and write a CSV flat file of contact information\nwith the following record layout:"}),"\n",(0,r.jsxs)("table",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"\xa0"}),(0,r.jsx)("th",{children:"Field Name"}),(0,r.jsx)("th",{children:"Format"})]}),(0,r.jsx)("tr",{children:(0,r.jsx)("td",{colspan:"3",children:(0,r.jsx)("i",{children:"Header Record"})})}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"0"}),(0,r.jsx)("td",{children:"Record Type"}),(0,r.jsx)("td",{children:'"H"'})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"1"}),(0,r.jsx)("td",{children:"File Date"}),(0,r.jsx)("td",{children:"Date (YYYY-MM-DD)"})]}),(0,r.jsx)("tr",{children:(0,r.jsx)("td",{colspan:"3",children:(0,r.jsx)("i",{children:"Detail Record"})})}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"0"}),(0,r.jsx)("td",{children:"Record Type"}),(0,r.jsx)("td",{children:'"D"'})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"1"}),(0,r.jsx)("td",{children:"First Name"}),(0,r.jsx)("td",{children:"String"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"2"}),(0,r.jsx)("td",{children:"Last Name"}),(0,r.jsx)("td",{children:"String"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"3"}),(0,r.jsx)("td",{children:"Street"}),(0,r.jsx)("td",{children:"String"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"4"}),(0,r.jsx)("td",{children:"City"}),(0,r.jsx)("td",{children:"String"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"5"}),(0,r.jsx)("td",{children:"State"}),(0,r.jsx)("td",{children:"String"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"6"}),(0,r.jsx)("td",{children:"Zip"}),(0,r.jsx)("td",{children:"String"})]}),(0,r.jsx)("tr",{children:(0,r.jsx)("td",{colspan:"3",children:(0,r.jsx)("i",{children:"Trailer Record"})})}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"0"}),(0,r.jsx)("td",{children:"Record Type"}),(0,r.jsx)("td",{children:'"T"'})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"1"}),(0,r.jsx)("td",{children:"Detail Record Count"}),(0,r.jsx)("td",{children:"Integer"})]})]}),"\n",(0,r.jsx)(n.p,{children:"A sample input file could look like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"H,2012-05-19\nD,Joe,Johnson,123 Main St,Chicago,IL,60610\nD,Jane,Smith,,,,\nD,Albert,Jackson,456 State St,Chicago,IL,60614\nT,3\n"})}),"\n",(0,r.jsx)(n.p,{children:"And let's suppose you want to bind detail records to the following Java class."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"package example;\n\npublic class Contact {\n    String firstName;\n    String lastName;\n    String street;\n    String city;\n    String state;\n    String zip;\n    \n    // getters and setters not shown...\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:'BeanIO is configured using an XML mapping file.  A 2.0 mapping file named "contacts.xml"\n(shown below) can be used to read and write our CSV contacts file.'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<beanio xmlns="http://www.beanio.org/2012/03">\n\n   \x3c!-- \'format\' identifies the type of stream --\x3e\n   <stream name="contacts" format="csv">\n      \x3c!-- \'class\' binds the header record to a java.util.HashMap --\x3e\n      <record name="header" class="map">\n         \x3c!-- \'rid\' indicates this field is used to identify the record --\x3e\n         <field name="recordType" rid="true" literal="H" />\n         \x3c!-- \'format\' can be used to provide Date and Number formats --\x3e\n         <field name="fileDate" type="date" format="yyyy-MM-dd" />\n      </record>\n\n      \x3c!-- Detail records are bound to example.Contact --\x3e\n      <record name="contact" class="example.Contact">\n         \x3c!-- \'ignore\' indicates this field is not bound to a bean property --\x3e\n         <field name="recordType" rid="true" literal="D" ignore="true" />\n         <field name="firstName" />\n         <field name="lastName" />\n         <field name="street" />\n         <field name="city" />\n         <field name="state" />\n         <field name="zip" />\n      </record>\n\n      \x3c!-- \'target\' binds the trailer record to the Integer record count field --\x3e\n      <record name="trailer" target="recordCount">\n         \x3c!-- \'literal\' is used to define constant values --\x3e\n         <field name="recordType" rid="true" literal="T" />\n         \x3c!-- \'type\' can be declared where bean introspection is not possible --\x3e\n         <field name="recordCount" type="int" />\n      </record>\n\n   </stream>\n</beanio>\n'})}),"\n",(0,r.jsx)(n.p,{children:"Using the mapping file and bean object from above, the following code will read\nand write our CSV contacts file. (For brevity, exception handling is lacking.)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package example;\n\nimport org.beanio.*;\nimport java.io.*;\n\npublic class ExampleMain {\n\n   public static void main(String[] args) throws Exception {\n      // create a BeanIO StreamFactory\n      StreamFactory factory = StreamFactory.newInstance();\n      // load the mapping file from the working directory\n      factory.load("contacts.xml");\n\n      // create a BeanReader to read from "input.csv"\n      BeanReader in = factory.createReader("contacts", new File("input.csv"));\n      // create a BeanWriter to write to "output.csv"\n      BeanWriter out = factory.createWriter("contacts", new File("output.csv"));\n\n      Object record = null;\n\n      // read records from "input.csv"\n      while ((record = in.read()) != null) {\n\n         // process each record\n         if ("header".equals(in.getRecordName())) {\n            Map<String, Object> header = (Map<String, Object>) record;\n            System.out.println(header.get("fileDate"));\n         } else if ("contact".equals(in.getRecordName())) {\n            Contact contact = (Contact) record;\n            // process the contact...\n         } else if ("trailer".equals(in.getRecordName())) {\n            Integer recordCount = (Integer) record;\n            System.out.println(recordCount + " contacts processed");\n         }\n\n         // write the record to "output.csv"\n         out.write(record);\n      }\n\n      in.close();\n\n      out.flush();\n      out.close();\n   }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"That's it! But of course, BeanIO supports many other cool\nfeatures. For example, if we wanted to strictly validate our contacts input\nfile, we could make the following additions to our mapping file."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<beanio xmlns="http://www.beanio.org/2012/03">\n\n  \x3c!-- \'strict\' enforces record order and record sizes --\x3e\n  <stream name="contacts" format="csv" strict="true">\n    \x3c!-- \'occurs\' enforces minimum and maximum record occurrences --\x3e\n    <record name="header" class="map" occurs="1">\n      <field name="recordType" rid="true" literal="H" />\n      \x3c!-- \'required\' indicates a field value is required --\x3e\n      <field name="fileDate" type="date" format="yyyy-MM-dd" required="true"/>\n    </record>  \n  \n    <record name="contact" class="example.Contact" occurs="0+">\n      <field name="recordType" rid="true" literal="D" ignore="true" />\n      \x3c!-- \'maxLength\' enforces a maximum String length --\x3e\n      <field name="firstName" maxLength="20" />\n      <field name="lastName" required="true" maxLength="30" />\n      <field name="street" maxLength="30" />\n      <field name="city" maxLength="25" />\n      <field name="state" minLength="2" maxLength="2" />\n      \x3c!-- \'regex\' enforces pattern matching --\x3e\n      <field name="zip" regex="\\d{5}" />\n    </record>\n\n    <record name="trailer" target="recordCount" occurs="1">\n      <field name="recordType" rid="true" literal="T" />\n      <field name="recordCount" type="int" required="true" />\n    </record>  \n    \n  </stream>\n</beanio>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Prefer to annotate the ",(0,r.jsx)(n.code,{children:"Contact"})," class instead?"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package example;\n\n@Record(minOccurs=0, maxOccurs=-1)\n@Fields({\n    @Field(at=0, name="recordType", rid=true, literal="D")\n})\npublic class Contact {\n\n    @Field(at=1, maxLength=20)\n    String firstName;\t\n    @Field(at=2, required=true, maxLength=30)\n    String lastName;\n    @Field(at=3, maxLength=30)\n    String street;\n    @Field(at=4, maxLength=25)\n    String city;\n    @Field(at=5, minLength=2, maxLength=2)\n    String state;\n    @Field(at=6, regex="\\d{5}")\n    String zip;\n    \n    // getters and setters not shown...\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Need to support XML?  Simply change the stream ",(0,r.jsx)(n.code,{children:"format"})," to 'xml', remove\nthe ",(0,r.jsx)(n.code,{children:"recordType"})," fields, and presto!  You can now read and write documents\nlike the following:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<contacts>\n  <header>\n    <fileDate>2012-05-19</fileDate>\n  </header>\n  <contact>\n    <firstName>Joe</firstName>\n    <lastName>Johnson</lastName>\n    <street>123 Main St</street>\n    <city>Chicago</city>\n    <state>IL</state>\n    <zip>60610</zip>\n  </contact>\n  <contact>\n    <firstName>Jane</firstName>\n    <lastName>Smith</lastName>\n    <street/>\n    <city/>\n    <state/>\n    <zip/>\n  </contact>\n  <trailer>\n    <recordCount>2</recordCount>\n  </trailer>\n</contacts>\n"})}),"\n",(0,r.jsxs)(n.p,{children:["But that's not all, check out the ",(0,r.jsx)(n.a,{href:"reference-guide",children:"reference guide"}),"\nfor more information."]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>c});var r=t(7294);const i={},a=r.createContext(i);function c(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);